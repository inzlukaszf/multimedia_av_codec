# Copyright (C) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimedia/av_codec/config.gni")

config("av_codec_media_engine_filters_config") {
  defines = [
    "HST_ANY_WITH_NO_RTTI",
    "MEDIA_OHOS",
  ]

  if (defined(av_codec_support_video_processing_engine) &&
      av_codec_support_video_processing_engine) {
    defines += [ "USE_VIDEO_PROCESSING_ENGINE" ]
  }

  cflags = [
    "-O2",
    "-fPIC",
    "-Wall",
    "-fexceptions",
    "-fno-rtti",
    "-Wno-unused-but-set-variable",
    "-Wno-format",
  ]
  cflags_cc = cflags

  include_dirs = [
    "$av_codec_root_dir/interfaces/kits/c",
    "$av_codec_root_dir/interfaces",
    "$av_codec_root_dir/interfaces/inner_api/native",
    "$av_codec_root_dir/services/media_engine/modules",
    "$av_codec_root_dir/services/media_engine/modules/sink",
    "$av_codec_root_dir/services/engine/base/include",
    "$drm_framework_root_dir/services/drm_service/ipc",
    "$graphic_2d_root_dir/interfaces/inner_api",
    "$graphic_suface_root_dir/interfaces/inner_api",
  ]

  if (defined(av_codec_support_video_processing_engine) &&
      av_codec_support_video_processing_engine) {
    include_dirs += [ "$video_processing_engine_root_dir/interfaces/inner_api" ]
  }
}

ohos_shared_library("av_codec_media_engine_filters") {
  branch_protector_ret = "pac_ret"
  install_enable = true

  sanitize = av_codec_sanitize

  configs = [
    ":av_codec_media_engine_filters_config",
    "$av_codec_root_dir/services/dfx:av_codec_service_log_dfx_public_config",
  ]

  sources = [
    "audio_capture_filter.cpp",
    "audio_data_source_filter.cpp",
    "audio_decoder_filter.cpp",
    "audio_encoder_filter.cpp",
    "audio_sink_filter.cpp",
    "codec_capability_adapter.cpp",
    "decoder_surface_filter.cpp",
    "demuxer_filter.cpp",
    "metadata_filter.cpp",
    "muxer_filter.cpp",
    "subtitle_sink_filter.cpp",
    "surface_decoder_adapter.cpp",
    "surface_decoder_filter.cpp",
    "surface_encoder_adapter.cpp",
    "surface_encoder_filter.cpp",
    "video_capture_filter.cpp",
    "video_decoder_adapter.cpp",
    "video_resize_filter.cpp",
  ]

  deps = [
    "$av_codec_root_dir/interfaces/inner_api/native:av_codec_client",
    "$av_codec_root_dir/interfaces/kits/c:native_media_codecbase",
    "$av_codec_root_dir/services/dfx:av_codec_service_dfx",
    "$av_codec_root_dir/services/media_engine/modules:av_codec_media_engine_modules",
  ]

  public_configs = [ "$audio_framework_root_dir/frameworks/native/audiocapturer:audio_capturer_config" ]

  external_deps = [
    "audio_framework:audio_capturer",
    "c_utils:utils",
    "drm_framework:drm_framework",
    "ffmpeg:libohosffmpeg",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hilog:libhilog",
    "hitrace:libhitracechain",
    "init:libbegetutil",
    "ipc:ipc_single",
    "media_foundation:media_foundation",
    "safwk:system_ability_fwk",
  ]

  if (av_codec_support_drm) {
    defines = [ "SUPPORT_DRM" ]
  }
  if (av_codec_support_drm) {
    external_deps += [ "drm_framework:drm_framework" ]
  }

  if (defined(av_codec_support_video_processing_engine) &&
      av_codec_support_video_processing_engine) {
    external_deps += [ "video_processing_engine:videoprocessingengine" ]
  }

  subsystem_name = "multimedia"
  part_name = "av_codec"
}

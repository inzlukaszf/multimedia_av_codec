# Copyright (C) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimedia/av_codec/config.gni")

config("av_codec_media_engine_modules_config") {
  defines = [
    "HST_ANY_WITH_NO_RTTI",
    "MEDIA_OHOS",
  ]

  cflags = [
    "-fno-exceptions",
    "-Wall",
    "-fno-common",
    "-fstack-protector-all",
    "-Wshadow",
    "-FPIC",
    "-FS",
    "-O2",
    "-D_FORTIFY_SOURCE=2",
    "-Wformat=2",
    "-Wdate-time",
  ]

  cflags_cc = [
    "-std=c++17",
    "-fno-rtti",
  ]

  include_dirs = [
    "$av_codec_root_dir/interfaces",
    "$av_codec_root_dir/interfaces/inner_api/native",
    "$av_codec_root_dir/services/drm_decryptor",
    "$av_codec_root_dir/services/media_engine/modules",
  ]
}

ohos_shared_library("av_codec_media_engine_modules") {
  branch_protector_ret = "pac_ret"
  install_enable = true

  sanitize = av_codec_sanitize

  configs = [
    ":av_codec_media_engine_modules_config",
    "$av_codec_root_dir/services/dfx:av_codec_service_log_dfx_public_config",
  ]

  sources = [
    "$av_codec_root_dir/services/drm_decryptor/codec_drm_decrypt.cpp",
    "demuxer/base_stream_demuxer.cpp",
    "demuxer/demuxer_plugin_manager.cpp",
    "demuxer/media_demuxer.cpp",
    "demuxer/stream_demuxer.cpp",
    "demuxer/type_finder.cpp",
    "media_codec/media_codec.cpp",
    "muxer/data_sink_fd.cpp",
    "muxer/data_sink_file.cpp",
    "muxer/media_muxer.cpp",
    "sink/audio_sink.cpp",
    "sink/media_sync_manager.cpp",
    "sink/media_synchronous_sink.cpp",
    "sink/subtitle_sink.cpp",
    "sink/video_sink.cpp",
    "source/audio_capture/audio_capture_module.cpp",
    "source/audio_capture/audio_type_translate.cpp",
    "source/source.cpp",
  ]

  deps = [ "$av_codec_root_dir/services/engine/base:av_codec_codec_base" ]

  public_configs = [ "$audio_framework_root_dir/frameworks/native/audiocapturer:audio_capturer_config" ]

  external_deps = [
    "audio_framework:audio_capturer",
    "c_utils:utils",
    "ffmpeg:libohosffmpeg",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hilog:libhilog",
    "hitrace:libhitracechain",
    "init:libbegetutil",
    "ipc:ipc_single",
    "media_foundation:media_foundation",
    "safwk:system_ability_fwk",
  ]

  if (av_codec_support_drm) {
    defines = [ "SUPPORT_DRM" ]
  }
  if (av_codec_support_drm) {
    external_deps += [ "drm_framework:drm_framework" ]
  }

  innerapi_tags = [ "platformsdk" ]
  subsystem_name = "multimedia"
  part_name = "av_codec"
}

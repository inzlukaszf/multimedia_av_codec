# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/av_codec/config.gni")

module_output_path = "av_codec/unittest"

hls_test_sources = [
  "$av_codec_root_dir/services/media_engine/plugins/source/http_source/base64/base64_utils.cpp",
  "$av_codec_root_dir/services/media_engine/plugins/source/http_source/download/downloader.cpp",
  "$av_codec_root_dir/services/media_engine/plugins/source/http_source/download/http_curl_client.cpp",
  "$av_codec_root_dir/services/media_engine/plugins/source/http_source/hls/hls_media_downloader.cpp",
  "$av_codec_root_dir/services/media_engine/plugins/source/http_source/hls/hls_playlist_downloader.cpp",
  "$av_codec_root_dir/services/media_engine/plugins/source/http_source/hls/hls_tags.cpp",
  "$av_codec_root_dir/services/media_engine/plugins/source/http_source/hls/m3u8.cpp",
  "$av_codec_root_dir/services/media_engine/plugins/source/http_source/hls/playlist_downloader.cpp",
  "$av_codec_root_dir/services/media_engine/plugins/source/http_source/http/http_media_downloader.cpp",
  "$av_codec_root_dir/services/media_engine/plugins/source/http_source/http_source_plugin.cpp",
  "$av_codec_root_dir/test/unittest/common/http_server_demo.cpp",
]

config("hls_unittest_cfg") {
  defines = [
    "HST_ANY_WITH_NO_RTTI",
    "MEDIA_OHOS",
    "TESTING",
  ]

  cflags = [
    "-Wno-sign-compare",
    "-fno-exceptions",
    "-fno-common",
    "-fstack-protector-all",
    "-Wshadow",
    "-FPIC",
    "-FS",
    "-O2",
    "-D_FORTIFY_SOURCE=2",
    "-Wformat=2",
    "-Wdate-time",
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  cflags_cc = [
    "-std=c++17",
    "-fno-rtti",
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  include_dirs = [
    "$av_codec_root_dir/interfaces",
    "$av_codec_root_dir/interfaces/inner_api/native",
    "$av_codec_root_dir/services/media_engine/plugins/source/http_source",
    "$av_codec_root_dir/services/media_engine/plugins/source/http_source/base64",
    "$av_codec_root_dir/services/media_engine/plugins/source/http_source/xml",
    "$av_codec_root_dir/services/media_engine/plugins/source/http_source/dash",
    "$av_codec_root_dir/services/media_engine/plugins/source/http_source/dash/include",
    "$av_codec_root_dir/services/media_engine/plugins/source/http_source/dash/include/mpd_parser",
    "$media_foundation_root_dir/src",
    "//third_party/curl/include",
    "//third_party/openssl/include",
    "$av_codec_root_dir/test/unittest/common",
  ]
}

ohos_unittest("hls_media_downloader_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  testonly = true
  configs = [
    ":hls_unittest_cfg",
    "$av_codec_root_dir/services/dfx:av_codec_service_log_dfx_public_config",
  ]
  sources = hls_test_sources + [ "hls_media_downloader_unit_test.cpp" ]
  deps = [
    "$av_codec_root_dir/services/dfx:av_codec_service_dfx",
    "//third_party/curl:curl_shared",
    "//third_party/openssl:libcrypto_shared",
  ]

  external_deps = [
    "c_utils:utils",
    "graphic_surface:surface",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "media_foundation:media_foundation",
    "netmanager_base:net_conn_manager_if",
    "safwk:system_ability_fwk",
  ]
  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

ohos_unittest("hls_playlist_downloader_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  testonly = true
  configs = [
    ":hls_unittest_cfg",
    "$av_codec_root_dir/services/dfx:av_codec_service_log_dfx_public_config",
  ]
  sources = hls_test_sources + [ "hls_playlist_downloader_unit_test.cpp" ]
  deps = [
    "$av_codec_root_dir/services/dfx:av_codec_service_dfx",
    "//third_party/curl:curl_shared",
    "//third_party/openssl:libcrypto_shared",
  ]

  external_deps = [
    "c_utils:utils",
    "graphic_surface:surface",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "media_foundation:media_foundation",
    "netmanager_base:net_conn_manager_if",
    "safwk:system_ability_fwk",
  ]
  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

ohos_unittest("hls_tags_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  testonly = true
  configs = [
    ":hls_unittest_cfg",
    "$av_codec_root_dir/services/dfx:av_codec_service_log_dfx_public_config",
  ]
  sources = hls_test_sources + [ "hls_tags_unit_test.cpp" ]
  deps = [
    "$av_codec_root_dir/services/dfx:av_codec_service_dfx",
    "//third_party/curl:curl_shared",
    "//third_party/openssl:libcrypto_shared",
  ]

  external_deps = [
    "c_utils:utils",
    "graphic_surface:surface",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "media_foundation:media_foundation",
    "netmanager_base:net_conn_manager_if",
    "safwk:system_ability_fwk",
  ]
  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

ohos_unittest("m3u8_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  testonly = true
  configs = [
    ":hls_unittest_cfg",
    "$av_codec_root_dir/services/dfx:av_codec_service_log_dfx_public_config",
  ]
  sources = hls_test_sources + [ "m3u8_unit_test.cpp" ]
  deps = [
    "$av_codec_root_dir/services/dfx:av_codec_service_dfx",
    "//third_party/curl:curl_shared",
    "//third_party/openssl:libcrypto_shared",
  ]

  external_deps = [
    "c_utils:utils",
    "graphic_surface:surface",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "media_foundation:media_foundation",
    "netmanager_base:net_conn_manager_if",
    "safwk:system_ability_fwk",
  ]
  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

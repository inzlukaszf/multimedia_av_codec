# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/av_codec/config.gni")

module_output_path = "av_codec/unittest"

av_codec_unittest_include_dirs = [
  "$av_codec_root_dir/interfaces/inner_api/native",
  "$av_codec_root_dir/interfaces/interfaces/inner_api/native",
]

av_codec_unittest_cflags = [
  "-std=c++17",
  "-fno-rtti",
  "-fno-exceptions",
  "-Wall",
  "-fno-common",
  "-fstack-protector-strong",
  "-Wshadow",
  "-FPIC",
  "-FS",
  "-O2",
  "-D_FORTIFY_SOURCE=2",
  "-fvisibility=hidden",
  "-Wformat=2",
  "-Wdate-time",
  "-Werror",
  "-Wextra",
  "-Wimplicit-fallthrough",
  "-Wsign-compare",
  "-Wunused-parameter",
]

##################################################################################################################
ohos_unittest("av_audio_capi_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = av_codec_unittest_include_dirs
  include_dirs += [
    "./",
    "//third_party/ffmpeg",
    "$av_codec_root_dir/interfaces/kits/c",
    "$av_codec_root_dir/services/engine/common/include",
    "$av_codec_root_dir/services/engine/base/include",
    "$av_codec_root_dir/services/utils/include",
    "$av_codec_root_dir/services/engine/codec/include/audio",
    "$av_codec_root_dir/services/engine/factory",
  ]

  cflags = av_codec_unittest_cflags

  cflags_cc = cflags

  public_configs = []

  if (av_codec_support_test) {
    sources = [ "./audio_decoder_capi_unit_test.cpp" ]
  }

  deps = [
    "$av_codec_root_dir/interfaces/inner_api/native:av_codec_client",
    "$av_codec_root_dir/interfaces/kits/c:capi_packages",
    "$av_codec_root_dir/services/engine/codec/audio:av_codec_audio_ffmpeg_codec",
    "$av_codec_root_dir/services/services:av_codec_service",
    "$av_codec_root_dir/services/utils:av_codec_service_utils",
  ]

  external_deps = [
    "graphic_surface:surface",
    "media_foundation:native_media_core",
  ]

  if (target_cpu == "arm64") {
    av_codec_path = "\"/system/lib64\""
  } else {
    av_codec_path = "\"/system/lib\""
  }
  defines = [ "AV_CODEC_PATH=${av_codec_path}" ]

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

##################################################################################################################
ohos_unittest("av_audio_codecbase_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = av_codec_unittest_include_dirs
  include_dirs += [
    "./",
    "//third_party/ffmpeg",
    "$av_codec_root_dir/interfaces/kits/c",
    "$av_codec_root_dir/services/engine/common/include",
    "$av_codec_root_dir/services/engine/base/include",
    "$av_codec_root_dir/services/utils/include",
    "$av_codec_root_dir/services/engine/codec/include/audio",
    "$av_codec_root_dir/services/engine/factory",
  ]

  cflags = av_codec_unittest_cflags

  cflags_cc = cflags

  public_configs = []

  if (av_codec_support_test) {
    sources = [ "./audio_decoder_codecbase_unit_test.cpp" ]
  }

  deps = [
    "$av_codec_root_dir/interfaces/inner_api/native:av_codec_client",
    "$av_codec_root_dir/interfaces/kits/c:capi_packages",
    "$av_codec_root_dir/services/engine/codec/audio:av_codec_audio_ffmpeg_codec",
    "$av_codec_root_dir/services/services:av_codec_service",
    "$av_codec_root_dir/services/utils:av_codec_service_utils",
  ]

  external_deps = [
    "graphic_surface:surface",
    "hilog:libhilog",
  ]

  if (target_cpu == "arm64") {
    av_codec_path = "\"/system/lib64\""
  } else {
    av_codec_path = "\"/system/lib\""
  }
  defines = [ "AV_CODEC_PATH=${av_codec_path}" ]

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

##################################################################################################################
ohos_unittest("av_audio_decode_ability_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = av_codec_unittest_include_dirs
  include_dirs += [
    "./",
    "//third_party/ffmpeg",
    "$av_codec_root_dir/interfaces/kits/c",
    "$av_codec_root_dir/services/engine/common/include",
    "$av_codec_root_dir/services/engine/base/include",
    "$av_codec_root_dir/services/utils/include",
    "$av_codec_root_dir/services/engine/codec/include/audio",
    "$av_codec_root_dir/services/engine/factory",
  ]

  cflags = av_codec_unittest_cflags

  cflags_cc = cflags

  public_configs = []

  if (av_codec_support_test) {
    sources = [ "./audio_decoder_ability_unit_test.cpp" ]
  }

  deps = [
    "$av_codec_root_dir/interfaces/inner_api/native:av_codec_client",
    "$av_codec_root_dir/interfaces/kits/c:capi_packages",
    "$av_codec_root_dir/services/engine/codec/audio:av_codec_audio_ffmpeg_codec",
    "$av_codec_root_dir/services/services:av_codec_service",
    "$av_codec_root_dir/services/utils:av_codec_service_utils",
  ]

  external_deps = [
    "graphic_surface:surface",
    "media_foundation:native_media_core",
  ]

  if (target_cpu == "arm64") {
    av_codec_path = "\"/system/lib64\""
  } else {
    av_codec_path = "\"/system/lib\""
  }
  defines = [ "AV_CODEC_PATH=${av_codec_path}" ]

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

##################################################################################################################
ohos_unittest("av_audio_inner_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = av_codec_unittest_include_dirs
  include_dirs += [
    "./",
    "//third_party/ffmpeg",
    "$av_codec_root_dir/interfaces/kits/c",
    "$av_codec_root_dir/services/engine/common/include",
    "$av_codec_root_dir/services/engine/base/include",
    "$av_codec_root_dir/services/utils/include",
    "$av_codec_root_dir/services/engine/codec/include/audio",
    "$av_codec_root_dir/services/engine/factory",
  ]

  cflags = av_codec_unittest_cflags

  cflags_cc = cflags

  public_configs = []

  if (av_codec_support_test) {
    sources = [ "./audio_decoder_inner_unit_test.cpp" ]
  }

  deps = [
    "$av_codec_root_dir/interfaces/inner_api/native:av_codec_client",
    "$av_codec_root_dir/interfaces/kits/c:capi_packages",
    "$av_codec_root_dir/services/engine/codec/audio:av_codec_audio_ffmpeg_codec",
    "$av_codec_root_dir/services/services:av_codec_service",
    "$av_codec_root_dir/services/utils:av_codec_service_utils",
  ]

  external_deps = [ "graphic_surface:surface" ]

  if (target_cpu == "arm64") {
    av_codec_path = "\"/system/lib64\""
  } else {
    av_codec_path = "\"/system/lib\""
  }
  defines = [ "AV_CODEC_PATH=${av_codec_path}" ]

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

##################################################################################################################
ohos_unittest("av_audio_encoder_capi_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = av_codec_unittest_include_dirs
  include_dirs += [
    "./",
    "//third_party/ffmpeg",
    "$av_codec_root_dir/interfaces/kits/c",
    "$av_codec_root_dir/services/engine/common/include",
    "$av_codec_root_dir/services/engine/base/include",
    "$av_codec_root_dir/services/utils/include",
    "$av_codec_root_dir/services/engine/codec/include/audio",
    "$av_codec_root_dir/services/engine/factory",
  ]

  cflags = av_codec_unittest_cflags

  cflags_cc = cflags

  public_configs = []

  if (av_codec_support_test) {
    sources = [ "./audio_encoder_capi_unit_test.cpp" ]
  }

  deps = [
    "$av_codec_root_dir/interfaces/inner_api/native:av_codec_client",
    "$av_codec_root_dir/interfaces/kits/c:capi_packages",
    "$av_codec_root_dir/services/engine/codec/audio:av_codec_audio_ffmpeg_codec",
    "$av_codec_root_dir/services/services:av_codec_service",
    "$av_codec_root_dir/services/utils:av_codec_service_utils",
  ]

  external_deps = [
    "graphic_surface:surface",
    "media_foundation:native_media_core",
  ]

  if (target_cpu == "arm64") {
    av_codec_path = "\"/system/lib64\""
  } else {
    av_codec_path = "\"/system/lib\""
  }
  defines = [ "AV_CODEC_PATH=${av_codec_path}" ]

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

##################################################################################################################
ohos_unittest("av_audio_encoder_avbuffer_capi_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = av_codec_unittest_include_dirs
  include_dirs += [
    "./",
    "//third_party/ffmpeg",
    "$av_codec_root_dir/interfaces/kits/c",
    "$av_codec_root_dir/services/engine/common/include",
    "$av_codec_root_dir/services/engine/base/include",
    "$av_codec_root_dir/services/utils/include",
    "$av_codec_root_dir/services/engine/codec/include/audio",
    "$av_codec_root_dir/services/engine/factory",
  ]

  cflags = av_codec_unittest_cflags

  cflags_cc = cflags

  public_configs = []

  if (av_codec_support_test) {
    sources = [ "./audio_encoder_avbuffer_capi_unit_test.cpp" ]
  }

  deps = [
    "$av_codec_root_dir/interfaces/inner_api/native:av_codec_client",
    "$av_codec_root_dir/interfaces/kits/c:capi_packages",
    "$av_codec_root_dir/services/engine/codec/audio:av_codec_audio_ffmpeg_codec",
    "$av_codec_root_dir/services/services:av_codec_service",
    "$av_codec_root_dir/services/utils:av_codec_service_utils",
  ]

  external_deps = [
    "graphic_surface:surface",
    "media_foundation:media_foundation",
    "media_foundation:native_media_core",
  ]

  if (target_cpu == "arm64") {
    av_codec_path = "\"/system/lib64\""
  } else {
    av_codec_path = "\"/system/lib\""
  }
  defines = [ "AV_CODEC_PATH=${av_codec_path}" ]

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

##################################################################################################################
ohos_unittest("av_audio_decoder_avbuffer_capi_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = av_codec_unittest_include_dirs
  include_dirs += [
    "./",
    "//third_party/ffmpeg",
    "$av_codec_root_dir/interfaces/kits/c",
    "$av_codec_root_dir/services/engine/common/include",
    "$av_codec_root_dir/services/engine/base/include",
    "$av_codec_root_dir/services/utils/include",
    "$av_codec_root_dir/services/engine/codec/include/audio",
    "$av_codec_root_dir/services/engine/factory",
    "$av_codec_root_dir/test/unittest/common/common_mock/",
    "$av_codec_root_dir/test/unittest/common/common_mock/drm_mock/capi/",
  ]

  cflags = av_codec_unittest_cflags

  cflags_cc = cflags

  public_configs = []

  if (av_codec_support_test) {
    sources = [ "./audio_decoder_avbuffer_capi_unit_test.cpp" ]
  }
  if (av_codec_support_drm) {
    sources += [ "$av_codec_root_dir/test/unittest/common/common_mock/drm_mock/capi/media_key_system_mock.cpp" ]
  }

  deps = [
    "$av_codec_root_dir/interfaces/inner_api/native:av_codec_client",
    "$av_codec_root_dir/interfaces/kits/c:capi_packages",
    "$av_codec_root_dir/services/engine/codec/audio:av_codec_audio_ffmpeg_codec",
    "$av_codec_root_dir/services/services:av_codec_service",
    "$av_codec_root_dir/services/utils:av_codec_service_utils",
  ]

  external_deps = [
    "graphic_surface:surface",
    "media_foundation:media_foundation",
    "media_foundation:native_media_core",
  ]

  if (target_cpu == "arm64") {
    av_codec_path = "\"/system/lib64\""
  } else {
    av_codec_path = "\"/system/lib\""
  }
  defines = [ "AV_CODEC_PATH=${av_codec_path}" ]

  if (av_codec_support_drm) {
    external_deps += [
      "drm_framework:drm_framework",
      "drm_framework:native_drm",
    ]
  }

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

##################################################################################################################
ohos_unittest("av_audio_media_codec_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = av_codec_unittest_include_dirs
  include_dirs += [
    "./",
    "$av_codec_root_dir/interfaces",
    "$av_codec_root_dir/interfaces/kits/c",
    "$av_codec_root_dir/services/engine/common/include",
    "$av_codec_root_dir/services/media_engine/modules/media_codec",
  ]

  cflags = [
    "-fno-exceptions",
    "-Wall",
    "-fno-common",
    "-fstack-protector-all",
    "-Wshadow",
    "-FPIC",
    "-FS",
    "-O2",
    "-D_FORTIFY_SOURCE=2",
    "-Wformat=2",
    "-Wdate-time",
  ]

  cflags_cc = [
    "-std=c++17",
    "-fno-rtti",
  ]

  public_configs = []

  sources = [ "./audio_media_codec_unit_test.cpp" ]

  deps = [ "$av_codec_root_dir/services/media_engine/modules:av_codec_media_engine_modules" ]

  external_deps = [
    "c_utils:utils",
    "media_foundation:media_foundation",
  ]

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

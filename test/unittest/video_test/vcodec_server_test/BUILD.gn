# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/av_codec/config.gni")

module_output_path = "av_codec/unittest"

av_codec_unittest_cflags = [
  "-std=c++17",
  "-fno-rtti",
  "-Wall",
  "-fno-common",
  "-fstack-protector-strong",
  "-Wshadow",
  "-FPIC",
  "-FS",
  "-O2",
  "-D_FORTIFY_SOURCE=2",
  "-fvisibility=hidden",
  "-Wformat=2",
  "-Wdate-time",
  "-Werror",
  "-Wextra",
  "-Wimplicit-fallthrough",
  "-Wsign-compare",
  "-Wno-unused-function",
  "-Wno-unused-parameter",
  "-Dprivate=public",
  "-Dprotected=public",
]

group("codec_server_test") {
  testonly = true
  deps = [ ":codec_server_coverage_unit_test" ]
}

##################################################################################################################
codec_server_coverage_include_dirs = [
  "./",
  "./mock/include",
  "$av_codec_root_dir/test/unittest/common",
  "$av_codec_root_dir/interfaces/inner_api/native",
  "$av_codec_root_dir/services/dfx/include",
  "$av_codec_root_dir/services/drm_decryptor",
  "$av_codec_root_dir/services/engine/base/include/",
  "$av_codec_root_dir/services/engine/codec/include/audio/",
  "$av_codec_root_dir/services/engine/common/include/",
  "$av_codec_root_dir/services/include",
  "$av_codec_root_dir/services/services/codec/server",
  "$av_codec_root_dir/services/services/codec/server/post_processing",
  "$av_codec_root_dir/services/utils/include",

  # av_codec_engine_codeclist_mock
  "$av_codec_root_dir/services/engine/codeclist",
  "$av_codec_root_dir/../../graphic/graphic_2d/utils/sync_fence/export",
  "$av_codec_root_dir/../../graphic/graphic_surface/surface/include",
  "$av_codec_root_dir/../../graphic/graphic_2d/interfaces/inner_api",
  "$av_codec_root_dir/../../window/window_manager/interfaces/innerkits",
  "$av_codec_root_dir/services/media_engine/plugins/ffmpeg_adapter/common/",
]

ohos_unittest("codec_server_coverage_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  cflags = av_codec_unittest_cflags
  cflags_cc = cflags
  include_dirs = codec_server_coverage_include_dirs
  defines = av_codec_defines
  if (av_codec_enable_special_codec) {
    defines += [ "AV_CODEC_AUDIO_VIVID_CAPACITY" ]
  }

  sources = [
    "$av_codec_root_dir/frameworks/native/common/avcodec_errors.cpp",
    "$av_codec_root_dir/services/services/codec/server/codec_factory.cpp",
    "$av_codec_root_dir/services/services/codec/server/codec_param_checker.cpp",
    "$av_codec_root_dir/services/services/codec/server/codec_server.cpp",
    "$av_codec_root_dir/services/services/codec/server/post_processing/dynamic_controller.cpp",
    "$av_codec_root_dir/services/services/codec/server/post_processing/dynamic_interface.cpp",
    "$av_codec_root_dir/services/services/codec/server/post_processing/state_machine.cpp",
    "$av_codec_root_dir/services/services/codec/server/temporal_scalability.cpp",
    "./codec_server_coverage_unit_test.cpp",
    "./mock/codec_drm_decrypt_mock.cpp",
    "./mock/codecbase_mock.cpp",
  ]

  # av_codec_engine_codeclist_mock
  sources += [
    "$av_codec_root_dir/services/engine/codeclist/codeclist_core.cpp",
    "./mock/codec_ability_singleton_mock.cpp",
  ]

  deps = [
    ":av_codec_engine_codeclist_mock",  # av_codec_engine_codeclist_mock
    "$av_codec_root_dir/services/dfx:av_codec_service_dfx",
    "$av_codec_root_dir/services/utils:av_codec_service_utils",
    "//third_party/googletest:gmock_main",
  ]

  external_deps = [
    "c_utils:utils",
    "graphic_2d:libgraphic_utils",
    "graphic_2d:librender_service_client",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hilog:libhilog",
    "ipc:ipc_single",
    "media_foundation:media_foundation",
    "window_manager:libwm",
  ]

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

# 目的：反复mock单例模式的初始化方法
# 作用：defines将CodecAbilitySingleton替换成Impl，在测试用例中继承Impl并重写GetInstance方法
ohos_static_library("av_codec_engine_codeclist_mock") {
  testonly = true
  cflags = av_codec_unittest_cflags
  cflags_cc = cflags
  defines = [ "CodecAbilitySingleton=CodecAbilitySingletonImpl" ]
  if (av_codec_enable_special_codec) {
    defines += [ "AV_CODEC_AUDIO_VIVID_CAPACITY" ]
  }
  sanitize = av_codec_sanitize
  include_dirs = codec_server_coverage_include_dirs

  sources = [
    "$av_codec_root_dir/services/engine/codeclist/audio_codeclist_info.cpp",
    "$av_codec_root_dir/services/engine/codeclist/codec_ability_singleton.cpp",
    "$av_codec_root_dir/services/engine/codeclist/codeclist_builder.cpp",
    "$av_codec_root_dir/services/media_engine/plugins/ffmpeg_adapter/common/hdi_codec.cpp",
  ]

  deps = [
    "$av_codec_root_dir/services/dfx:av_codec_service_dfx",
    "$av_codec_root_dir/services/utils:av_codec_service_utils",
    "//third_party/googletest:gmock_main",
  ]

  external_deps = [
    "c_utils:utils",
    "drivers_interface_codec:libcodec_proxy_3.0",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hilog:libhilog",
    "ipc:ipc_single",
    "media_foundation:media_foundation",
  ]
  subsystem_name = "multimedia"
  part_name = "av_codec"
}

##################################################################################################################


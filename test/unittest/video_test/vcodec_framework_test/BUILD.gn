# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/av_codec/config.gni")

module_output_path = "av_codec/unittest"

vcodec_unittest_cflags = [
  "-std=c++17",
  "-fno-rtti",
  "-fno-exceptions",
  "-Wall",
  "-fno-common",
  "-fstack-protector-strong",
  "-Wshadow",
  "-FPIC",
  "-FS",
  "-O2",
  "-D_FORTIFY_SOURCE=2",
  "-fvisibility=hidden",
  "-Wformat=2",
  "-Wdate-time",
  "-Werror",
  "-Wextra",
  "-Wimplicit-fallthrough",
  "-Wsign-compare",
  "-Wno-constant-conversion",
  "-Wno-unused-function",
  "-Wno-unused-parameter",
  "-Dprivate=public",
  "-Dprotected=public",
]

group("vcodec_framework_test") {
  testonly = true
  if (av_codec_support_codec) {
    deps = [
      ":video_buffer_converter_unit_test",
      ":videodec_capi_unit_test",
      ":videodec_hdrvivid2sdr_capi_unit_test",
      ":videodec_hdrvivid2sdr_inner_unit_test",
      ":videodec_hevcdec_unit_test",
      ":videodec_inner_unit_test",
      ":videodec_stable_unit_test",
    ]
    if (av_codec_support_hcodec) {
      deps += [
        ":videoenc_capi_unit_test",
        ":videoenc_inner_unit_test",
        ":videoenc_stable_unit_test",
      ]
    }
  }
}

#################################################################################################################videodec
ohos_unittest("videodec_capi_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = [
    "./",
    "./common/include",
    "./func_sample/mock",
    "./func_sample/mock/capi",
    "./func_sample/sample",
    "$av_codec_root_dir/test/unittest/codeclist_test",
    "$av_codec_root_dir/test/unittest/codeclist_test/capi",
    "$av_codec_root_dir/test/unittest/common/",
    "$av_codec_root_dir/test/unittest/common/common_mock/drm_mock/capi/",
    "$av_codec_root_dir/../../../third_party/openssl/ohos_lite/include",
  ]

  defines = [ "VIDEODEC_CAPI_UNIT_TEST" ]

  cflags = vcodec_unittest_cflags

  sources = [
    "$av_codec_root_dir/test/unittest/codeclist_test/capi/codeclist_capi_mock.cpp",
    "$av_codec_root_dir/test/unittest/codeclist_test/capi/codeclist_capi_mock_factory.cpp",
    "./common/unittest_utils.cpp",
    "./func_sample/mock/capi/vcodec_capi_mock_factory.cpp",
    "./func_sample/mock/capi/videodec_capi_mock.cpp",
    "./func_sample/sample/vdec_sample.cpp",
    "./videodec_func_unit_test.cpp",
  ]
  if (av_codec_support_drm) {
    sources += [ "$av_codec_root_dir/test/unittest/common/common_mock/drm_mock/capi/media_key_system_mock.cpp" ]
  }

  public_deps =
      [ "$av_codec_root_dir/test/unittest/common:av_codec_capi_unit_test" ]

  external_deps = [
    "c_utils:utils",
    "graphic_2d:librender_service_client",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hilog:libhilog",
    "window_manager:libwm",
  ]

  if (av_codec_support_drm) {
    external_deps += [
      "drm_framework:drm_framework",
      "drm_framework:native_drm",
    ]
  }

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

#################################################################################################################videodec
ohos_unittest("videodec_inner_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = [
    "./",
    "./common/include",
    "./func_sample/mock",
    "./func_sample/mock/inner",
    "./func_sample/sample",
    "$av_codec_root_dir/test/unittest/codeclist_test/",
    "$av_codec_root_dir/test/unittest/codeclist_test/inner",
    "$av_codec_root_dir/test/unittest/common/",
    "$av_codec_root_dir/../../../third_party/openssl/ohos_lite/include",
  ]

  defines = [ "VIDEODEC_INNER_UNIT_TEST" ]

  cflags = vcodec_unittest_cflags

  sources = [
    "$av_codec_root_dir/test/unittest/codeclist_test/inner/codeclist_inner_mock.cpp",
    "$av_codec_root_dir/test/unittest/codeclist_test/inner/codeclist_inner_mock_factory.cpp",
    "./common/unittest_utils.cpp",
    "./func_sample/mock/inner/vcodec_inner_mock_factory.cpp",
    "./func_sample/mock/inner/videodec_inner_mock.cpp",
    "./func_sample/sample/vdec_sample.cpp",
    "./videodec_func_unit_test.cpp",
  ]

  public_deps =
      [ "$av_codec_root_dir/test/unittest/common:av_codec_inner_unit_test" ]

  external_deps = [
    "c_utils:utils",
    "drm_framework:drm_framework",
    "graphic_2d:librender_service_client",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hilog:libhilog",
    "window_manager:libwm",
  ]

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

#################################################################################################################videoenc
ohos_unittest("videoenc_capi_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = [
    "./",
    "./common/include",
    "./func_sample/mock",
    "./func_sample/mock/capi",
    "./func_sample/sample",
    "$av_codec_root_dir/test/unittest/codeclist_test",
    "$av_codec_root_dir/test/unittest/codeclist_test/capi",
    "$av_codec_root_dir/test/unittest/common/",
    "$av_codec_root_dir/frameworks/native/capi/common",
    "$av_codec_root_dir/../../../third_party/openssl/ohos_lite/include",
  ]

  defines = [ "VIDEOENC_CAPI_UNIT_TEST" ]
  if (target_cpu == "arm64") {
    defines += [ "HMOS_TEST" ]
  }

  cflags = vcodec_unittest_cflags

  sources = [
    "$av_codec_root_dir/test/unittest/codeclist_test/capi/codeclist_capi_mock.cpp",
    "$av_codec_root_dir/test/unittest/codeclist_test/capi/codeclist_capi_mock_factory.cpp",
    "./common/unittest_utils.cpp",
    "./func_sample/mock/capi/vcodec_capi_mock_factory.cpp",
    "./func_sample/mock/capi/videoenc_capi_mock.cpp",
    "./func_sample/sample/venc_sample.cpp",
    "./videoenc_func_unit_test.cpp",
  ]

  public_deps =
      [ "$av_codec_root_dir/test/unittest/common:av_codec_capi_unit_test" ]

  external_deps = [
    "c_utils:utils",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hilog:libhilog",
    "window_manager:libwm",
  ]

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

#################################################################################################################videoenc
ohos_unittest("videoenc_inner_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = [
    "./",
    "./common/include",
    "./func_sample/mock",
    "./func_sample/mock/inner",
    "./func_sample/sample",
    "$av_codec_root_dir/test/unittest/codeclist_test",
    "$av_codec_root_dir/test/unittest/codeclist_test/codeclist_test",
    "$av_codec_root_dir/test/unittest/common/",
    "$av_codec_root_dir/../../../third_party/openssl/ohos_lite/include",
  ]

  defines = [ "VIDEOENC_INNER_UNIT_TEST" ]
  if (target_cpu == "arm64") {
    defines += [ "HMOS_TEST" ]
  }

  cflags = vcodec_unittest_cflags

  sources = [
    "$av_codec_root_dir/test/unittest/codeclist_test/inner/codeclist_inner_mock.cpp",
    "$av_codec_root_dir/test/unittest/codeclist_test/inner/codeclist_inner_mock_factory.cpp",
    "./common/unittest_utils.cpp",
    "./func_sample/mock/inner/vcodec_inner_mock_factory.cpp",
    "./func_sample/mock/inner/videoenc_inner_mock.cpp",
    "./func_sample/sample/venc_sample.cpp",
    "./videoenc_func_unit_test.cpp",
  ]

  public_deps =
      [ "$av_codec_root_dir/test/unittest/common:av_codec_inner_unit_test" ]

  external_deps = [
    "c_utils:utils",
    "drm_framework:drm_framework",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hilog:libhilog",
    "window_manager:libwm",
  ]

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

#################################################################################################################hevcdec
ohos_unittest("videodec_hevcdec_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = []
  sources = [ "./videodec_hevcdec_unit_test.cpp" ]
  public_deps = [ "./stable_sample:video_sample" ]
  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

#################################################################################################################videodec
ohos_unittest("videodec_stable_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = []
  sources = [ "./videodec_stable_unit_test.cpp" ]
  public_deps = [ "./stable_sample:video_sample" ]
  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

#################################################################################################################videoenc
ohos_unittest("videoenc_stable_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = []
  sources = [ "./videoenc_stable_unit_test.cpp" ]
  public_deps = [ "./stable_sample:video_sample" ]
  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

#################################################################################################################videoenc
ohos_unittest("video_buffer_converter_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = [
    "$av_codec_root_dir/services/services/codec/ipc",
    "./common/include",
  ]
  cflags = vcodec_unittest_cflags
  sources = [ "./buffer_converter_unit_test.cpp" ]
  public_deps =
      [ "$av_codec_root_dir/test/unittest/common:av_codec_capi_unit_test" ]
  deps = [ "$av_codec_root_dir/services/dfx:av_codec_service_dfx" ]

  external_deps = [
    "c_utils:utils",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hilog:libhilog",
  ]

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

#################################################################################################################
ohos_unittest("videodec_hdrvivid2sdr_capi_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = [
    "./",
    "./common/include",
    "./func_sample/mock",
    "./func_sample/mock/capi",
    "./func_sample/sample",
    "$av_codec_root_dir/interfaces/kits/c:capi_packages",
    "$av_codec_root_dir/test/unittest/codeclist_test",
    "$av_codec_root_dir/test/unittest/codeclist_test/capi",
    "$av_codec_root_dir/test/unittest/common/",
    "$av_codec_root_dir/test/unittest/common/common_mock/drm_mock/capi/",
    "$av_codec_root_dir/../../../third_party/openssl/ohos_lite/include",
  ]

  defines = [ "VIDEODEC_HDRVIVID2SDR_CAPI_UNIT_TEST" ]
  if (target_cpu == "arm64") {
    defines += [ "HMOS_TEST" ]
  }

  cflags = vcodec_unittest_cflags

  sources = [
    "$av_codec_root_dir/test/unittest/codeclist_test/capi/codeclist_capi_mock.cpp",
    "$av_codec_root_dir/test/unittest/codeclist_test/capi/codeclist_capi_mock_factory.cpp",
    "./common/unittest_utils.cpp",
    "./func_sample/mock/capi/vcodec_capi_mock_factory.cpp",
    "./func_sample/mock/capi/videodec_capi_mock.cpp",
    "./func_sample/sample/vdec_sample.cpp",
    "./videodec_hdrvivid2sdr_unit_test.cpp",
  ]
  if (av_codec_support_drm) {
    sources += [ "$av_codec_root_dir/test/unittest/common/common_mock/drm_mock/capi/media_key_system_mock.cpp" ]
  }

  deps = [ "$av_codec_root_dir/interfaces/kits/c:capi_packages" ]

  public_deps =
      [ "$av_codec_root_dir/test/unittest/common:av_codec_capi_unit_test" ]

  external_deps = [
    "c_utils:utils",
    "graphic_2d:librender_service_client",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hilog:libhilog",
    "window_manager:libwm",
  ]

  if (av_codec_support_drm) {
    external_deps += [
      "drm_framework:drm_framework",
      "drm_framework:native_drm",
    ]
  }

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

#################################################################################################################
ohos_unittest("videodec_hdrvivid2sdr_inner_unit_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  include_dirs = [
    "./",
    "./common/include",
    "./func_sample/mock",
    "./func_sample/mock/inner",
    "./func_sample/sample",
    "$av_codec_root_dir/interfaces/kits/c:capi_packages",
    "$av_codec_root_dir/test/unittest/codeclist_test/",
    "$av_codec_root_dir/test/unittest/codeclist_test/inner",
    "$av_codec_root_dir/test/unittest/common/",
    "$av_codec_root_dir/../../../third_party/openssl/ohos_lite/include",
  ]

  defines = [ "VIDEODEC_INNER_UNIT_TEST" ]
  if (target_cpu == "arm64") {
    defines += [ "HMOS_TEST" ]
  }

  cflags = vcodec_unittest_cflags

  sources = [
    "$av_codec_root_dir/test/unittest/codeclist_test/inner/codeclist_inner_mock.cpp",
    "$av_codec_root_dir/test/unittest/codeclist_test/inner/codeclist_inner_mock_factory.cpp",
    "./common/unittest_utils.cpp",
    "./func_sample/mock/inner/vcodec_inner_mock_factory.cpp",
    "./func_sample/mock/inner/videodec_inner_mock.cpp",
    "./func_sample/sample/vdec_sample.cpp",
    "./videodec_hdrvivid2sdr_unit_test.cpp",
  ]

  deps = [ "$av_codec_root_dir/interfaces/kits/c:capi_packages" ]

  public_deps =
      [ "$av_codec_root_dir/test/unittest/common:av_codec_inner_unit_test" ]

  external_deps = [
    "c_utils:utils",
    "drm_framework:drm_framework",
    "graphic_2d:librender_service_client",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hilog:libhilog",
    "window_manager:libwm",
  ]

  resource_config_file =
      "$av_codec_root_dir/test/unittest/resources/ohos_test.xml"
}

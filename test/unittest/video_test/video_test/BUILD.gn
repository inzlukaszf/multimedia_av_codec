# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/av_codec/config.gni")

config("video_sample_config") {
  include_dirs = [
    "./capbilities/data_producer/bitstream_reader",
    "./capbilities/data_producer/data_producer_base",
    "./capbilities/data_producer/demuxer",
    "./capbilities/data_producer/raw_data_reader",
    "./capbilities/video_codec/video_codec",
    "./capbilities/video_codec/video_decoder",
    "./capbilities/video_codec/video_encoder",
    "./capbilities/sample_buffer_queue",
    "./common/include",
    "./sample/base",
    "./sample/yuv_viewer",
    "./sample/decoder",
    "./sample/encoder",
    "./sample/helper/include",
    "$av_codec_root_dir",
    "$av_codec_root_dir/interfaces/kits/c",
    "$av_codec_root_dir/services/dfx/include",
  ]
}

ohos_source_set("video_sample") {
  sources = [
    "../../../../services/dfx/avcodec_trace.cpp",
    "./capbilities/data_producer/bitstream_reader/bitstream_reader.cpp",
    "./capbilities/data_producer/data_producer_base/data_producer_base.cpp",
    "./capbilities/data_producer/demuxer/demuxer.cpp",
    "./capbilities/data_producer/raw_data_reader/rawdata_reader.cpp",
    "./capbilities/sample_buffer_queue/sample_buffer_queue.cpp",
    "./capbilities/video_codec/video_codec/codec_callback.cpp",
    "./capbilities/video_codec/video_codec/video_codec_base.cpp",
    "./capbilities/video_codec/video_decoder/video_decoder.cpp",
    "./capbilities/video_codec/video_encoder/video_encoder.cpp",
    "./common/av_codec_sample_log.cpp",
    "./common/sample_utils.cpp",
    "./sample/base/sample_base.cpp",
    "./sample/base/video_sample_base.cpp",
    "./sample/decoder/video_decoder_sample.cpp",
    "./sample/encoder/video_encoder_sample.cpp",
    "./sample/helper/arg_checker.cpp",
    "./sample/helper/arg_parser.cpp",
    "./sample/helper/sample_helper.cpp",
    "./sample/yuv_viewer/yuv_viewer.cpp",
  ]

  deps = [ "$av_codec_root_dir/interfaces/kits/c:capi_packages" ]

  public_configs = [ ":video_sample_config" ]

  defines = [ "AVCODEC_LOG_USE_NO_DICT_LOG" ]

  cflags = [
    "-std=c++17",
    "-fno-rtti",
    "-fno-exceptions",
    "-Wall",
    "-fno-common",
    "-fstack-protector-strong",
    "-Wshadow",
    "-FPIC",
    "-FS",
    "-O2",
    "-D_FORTIFY_SOURCE=2",
    "-Wformat=2",
    "-Wdate-time",
    "-Werror",
    "-Wextra",
    "-Wimplicit-fallthrough",
    "-Wsign-compare",
    "-Wunused-parameter",
  ]

  external_deps = [
    "c_utils:utils",
    "graphic_2d:librender_service_client",
    "graphic_surface:surface",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "media_foundation:media_foundation",
    "media_foundation:native_media_core",
    "window_manager:libwm",
  ]

  subsystem_name = "multimedia"
  part_name = "av_codec"
}

ohos_executable("video_codec_demo") {
  sources = [ "./demo/video_codec_demo.cpp" ]

  deps = [ ":video_sample" ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "media_foundation:media_foundation",
    "media_foundation:native_media_core",
  ]

  subsystem_name = "multimedia"
  part_name = "av_codec"
}

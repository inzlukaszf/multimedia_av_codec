# Copyright (C) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimedia/av_codec/config.gni")

#################################################################################################################capi
config("av_codec_capi_unit_test_config") {
  include_dirs = [
    "./",
    "./common_mock/avmemory/capi",
    "./common_mock/avmemory",
    "./common_mock/surface/capi",
    "./common_mock/surface",
    "./common_mock/avformat/capi",
    "./common_mock/avformat",
    "./common_mock/avbuffer/capi",
    "./common_mock/avbuffer",
    "./common_mock",
    "$av_codec_root_dir/frameworks/native/capi/common",
    "$av_codec_root_dir/interfaces/inner_api/native",
    "$av_codec_root_dir/interfaces/kits/c",
    "$av_codec_root_dir/interfaces/",
    "$av_codec_root_dir/services/dfx/include",
    "$av_codec_root_dir/services/utils/include",
    "$av_codec_root_dir/../../graphic/graphic_2d/utils/sync_fence/export",
    "$av_codec_root_dir/../../graphic/graphic_surface/surface/include",
    "$av_codec_root_dir/../../graphic/graphic_2d/interfaces/inner_api",
    "$av_codec_root_dir/../../window/window_manager/interfaces/innerkits",
    "$media_foundation_root_dir/interface/kits/c",
    "$media_foundation_root_dir/interface/inner_api",
    "$media_foundation_root_dir/src/buffer/avbuffer/include",
  ]

  cflags = [
    "-std=c++17",
    "-fno-rtti",
    "-fexceptions",
    "-Dprivate=public",
    "-Dprotected=public",
  ]
  cflags_cc = cflags
  defines = av_codec_defines
}

ohos_static_library("av_codec_capi_unit_test") {
  testonly = true
  public_configs = [ ":av_codec_capi_unit_test_config" ]

  sources = [
    "./common_mock/avbuffer/capi/avbuffer_capi_mock.cpp",
    "./common_mock/avbuffer/capi/avbuffer_capi_mock_factory.cpp",
    "./common_mock/avformat/capi/avformat_capi_mock.cpp",
    "./common_mock/avformat/capi/avformat_capi_mock_factory.cpp",
    "./common_mock/avmemory/capi/avmemory_capi_mock.cpp",
    "./common_mock/avmemory/capi/avmemory_capi_mock_factory.cpp",
    "./common_mock/surface/capi/surface_capi_mock.cpp",
  ]

  public_deps = [
    "$av_codec_root_dir/interfaces/kits/c:capi_packages",
    "$av_codec_root_dir/interfaces/kits/c:native_media_vdec",
    "$av_codec_root_dir/interfaces/kits/c:native_media_venc",
    "$av_codec_root_dir/services/utils:av_codec_service_utils",
  ]

  external_deps = [
    "av_codec:av_codec_client",
    "bounds_checking_function:libsec_static",
    "c_utils:utils",
    "graphic_2d:libgraphic_utils",
    "graphic_2d:librender_service_client",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
    "media_foundation:media_foundation",
    "media_foundation:native_media_core",
    "window_manager:libwm",
  ]

  subsystem_name = "multimedia"
  part_name = "av_codec"
}

#################################################################################################################inner
config("av_codec_inner_unit_test_config") {
  include_dirs = [
    "./",
    "./common_mock/avmemory/inner",
    "./common_mock/avmemory",
    "./common_mock/surface/inner",
    "./common_mock/surface",
    "./common_mock/avformat/inner",
    "./common_mock/avformat",
    "./common_mock/avbuffer/inner",
    "./common_mock/avbuffer",
    "./common_mock",
    "$av_codec_root_dir/frameworks/native/capi/common",
    "$av_codec_root_dir/interfaces/inner_api/native",
    "$av_codec_root_dir/interfaces/",
    "$av_codec_root_dir/interfaces/kits/c",
    "$av_codec_root_dir/services/dfx/include",
    "$av_codec_root_dir/services/utils/include",
    "$av_codec_root_dir/../../graphic/graphic_2d/utils/sync_fence/export",
    "$av_codec_root_dir/../../graphic/graphic_surface/surface/include",
    "$av_codec_root_dir/../../graphic/graphic_2d/interfaces/inner_api",
    "$av_codec_root_dir/../../window/window_manager/interfaces/innerkits",
    "$media_foundation_root_dir/interface/kits/c",
    "$media_foundation_root_dir/interface/inner_api",
    "$media_foundation_root_dir/src/buffer/avbuffer/include",
  ]
  cflags = [
    "-std=c++17",
    "-fno-rtti",
    "-fexceptions",
    "-Dprivate=public",
    "-Dprotected=public",
  ]
  cflags_cc = cflags
  defines = av_codec_defines
}

ohos_source_set("av_codec_inner_unit_test") {
  testonly = true
  public_configs = [ ":av_codec_inner_unit_test_config" ]

  sources = [
    "./common_mock/avbuffer/inner/avbuffer_inner_mock.cpp",
    "./common_mock/avbuffer/inner/avbuffer_inner_mock_factory.cpp",
    "./common_mock/avformat/inner/avformat_inner_mock.cpp",
    "./common_mock/avformat/inner/avformat_inner_mock_factory.cpp",
    "./common_mock/avmemory/inner/avmemory_inner_mock.cpp",
    "./common_mock/avmemory/inner/avmemory_inner_mock_factory.cpp",
    "./common_mock/surface/inner/surface_inner_mock.cpp",
  ]

  public_deps = [ "$av_codec_root_dir/services/utils:av_codec_service_utils" ]

  external_deps = [
    "av_codec:av_codec_client",
    "bounds_checking_function:libsec_static",
    "c_utils:utils",
    "graphic_2d:libgraphic_utils",
    "graphic_2d:librender_service_client",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
    "media_foundation:media_foundation",
    "media_foundation:native_media_core",
    "window_manager:libwm",
  ]

  subsystem_name = "multimedia"
  part_name = "av_codec"
}

# Copyright (c) 2020-2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/av_codec/config.gni")

MEDIA_ROOT_DIR = "//foundation/multimedia/av_codec/"
module_output_path = "av_codec/moduletest"
AUDIO_ROOT_DIR = "//foundation/multimedia/audio_framework/"

ohos_unittest("audio_decoder_module_test") {
  sanitize = av_codec_test_sanitize
  module_out_path = module_output_path
  sources = [
    "Avbuffer/src/avcodec_audio_avbuffer_decoder_demo.cpp",
    "Avbuffer/src/common_tool.cpp",
    "Avbuffer/src/fuzz_test.cpp",
    "Avbuffer/src/null_check_test.cpp",
    "Avbuffer/src/param_check_test.cpp",
    "Avbuffer/src/status_check_test.cpp",
    "Common/src/AudioDecoderDemoCommon.cpp",
    "InnerAPI/InnerInterfaceDependCheckTest.cpp",
    "InnerAPI/InnerParamCheckTest.cpp",
    "NativeAPI/NativeInterfaceDependCheckTest.cpp",
    "NativeAPI/NativeNullCheckTest.cpp",
    "NativeAPI/NativeParamCheckTest.cpp",
  ]

  include_dirs = [
    "Avbuffer/include",
    "Common/include",
    "$MEDIA_ROOT_DIR/test/nativedemo/avmuxer",
    "$MEDIA_ROOT_DIR/interfaces/kits/c",
    "$MEDIA_ROOT_DIR/interfaces/inner_api/native",
    "$MEDIA_ROOT_DIR/services/services/factory",
    "$MEDIA_ROOT_DIR/services/engine/plugin/common",
    "$MEDIA_ROOT_DIR/services/engine/plugin/core",
    "$MEDIA_ROOT_DIR/services/engine/plugin/interface",
    "$MEDIA_ROOT_DIR/frameworks/native/capi/common",
    "$MEDIA_ROOT_DIR/services/dfx/include",
    "$MEDIA_ROOT_DIR/services/engine/base/include",
    "$MEDIA_ROOT_DIR/services/engine/codec/include/video",
    "$MEDIA_ROOT_DIR/services/engine/common/include",
    "$MEDIA_ROOT_DIR/services/engine/source/hst_releated",
    "$MEDIA_ROOT_DIR/services/services/factory",
    "$MEDIA_ROOT_DIR/services/utils/include",
    "$MEDIA_ROOT_DIR/test/nativedemo/include",
    "$AUDIO_ROOT_DIR/frameworks/native/audiorenderer/include",
    "$AUDIO_ROOT_DIR/frameworks/native/audiostream/include",
    "$AUDIO_ROOT_DIR/interfaces/inner_api/native/audiorenderer/include",
    "$AUDIO_ROOT_DIR/interfaces/inner_api/native/audiocommon/include",
    "$AUDIO_ROOT_DIR/interfaces/inner_api/native/audiomanager/include",
    "$AUDIO_ROOT_DIR/services/audio_service/clinet/include",
  ]

  cflags = [
    "-Wall",
    "-fno-rtti",
    "-fno-exceptions",
    "-fno-common",
    "-fstack-protector-strong",
    "-Wshadow",
    "-FPIC",
    "-FS",
    "-O2",
    "-D_FORTIFY_SOURCE=2",
    "-fvisibility=hidden",
    "-Wformat=2",
    "-Wdate-time",
    "-Werror",
    "-Wextra",
    "-Wimplicit-fallthrough",
    "-Wsign-compare",
    "-Wunused-parameter",
    "-Wno-deprecated-declarations",
  ]

  deps = [
    "$MEDIA_ROOT_DIR/interfaces/inner_api/native:av_codec_client",
    "$MEDIA_ROOT_DIR/interfaces/kits/c:capi_packages",
    "$MEDIA_ROOT_DIR/interfaces/kits/c:native_media_avmuxer",
    "$MEDIA_ROOT_DIR/services/services:av_codec_service",
  ]

  external_deps = [
    "audio_framework:audio_renderer",
    "bounds_checking_function:libsec_static",
    "c_utils:utils",
    "ffmpeg:libohosffmpeg",
    "hilog:libhilog",
    "ipc:ipc_core",
    "media_foundation:media_foundation",
    "media_foundation:native_media_core",
  ]

  if (av_codec_support_drm) {
    external_deps += [
      "drm_framework:drm_framework",
      "drm_framework:native_drm",
    ]
  }

  resource_config_file =
      "$MEDIA_ROOT_DIR/test/moduletest/resources/ohos_test.xml"
}
